// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Density

#include "Assets/Marching-Cubes/Assets/Scripts/Compute/Includes/Density.compute"
#include "Assets/Marching-Cubes/Assets/Scripts/Compute/Includes/Noise.compute"

// Noise settings
StructuredBuffer<float3> offsets;
int octaves;
float lacunarity;
float persistence;
float noiseScale;
float noiseWeight;
float floorOffset;
float weightMultiplier;
float3 xyzScale;
bool closeEdges;
float hardFloor;
float hardFloorWeight;

[numthreads(numThreads, numThreads, numThreads)]
void Density(int3 id : SV_DispatchThreadID)
{
	if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis) {
		return;
	}

	float3 pos = centre + id * spacing - boundsSize / 2;
	float offsetNoise = 0;

	float noise = 0;

	float frequency = noiseScale / 100;
	float amplitude = 1;
	float weight = 1;

	for (int j = 0; j < octaves; j++) {
		float n = snoise((pos + offsetNoise)* xyzScale * frequency + offsets[j] + offset);
		float v = 1 - abs(n);
		v = v * v;
		v *= weight;
		weight = max(min(v*weightMultiplier, 1), 0);
		noise += v * amplitude;
		amplitude *= persistence;
		frequency *= lacunarity;
	}

	float finalVal = -noise * noiseWeight;

	int index = indexFromCoord(id.x, id.y, id.z);
	points[index] = float4(pos, finalVal);
}
